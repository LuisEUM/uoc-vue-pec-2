Aqu√≠ tienes la transcripci√≥n completa del documento:

---

**Programaci√≥n Web Avanzada  
PEC 2: Componentizaci√≥n**  

Esta PEC abordar√° la creaci√≥n de los componentes fundamentales del caso de estudio, y la comprensi√≥n del funcionamiento de propiedades, par√°metros, y divisi√≥n de elementos en componentes.

### Conocimientos, Habilidades y Competencias  
En esta PEC se desarrollan los siguientes conocimientos (K), habilidades (S) y Competencias (C) del Grado en Multimedia 2023:  
- **K1.** Identificar y diferenciar los elementos de la teor√≠a de la multimedia para analizar, conceptualizar y dise√±ar productos interactivos multimedia.  
- **S3.** Utilizar de manera adecuada los lenguajes de programaci√≥n, las herramientas de desarrollo y las tecnolog√≠as disponibles para el an√°lisis, el dise√±o y la implementaci√≥n de aplicaciones multimedia.  
- **S7.** Analizar y sintetizar informaci√≥n para evaluar soluciones tecnol√≥gicas y elaborar propuestas de proyectos multimedia teniendo en cuenta los recursos, las alternativas disponibles y las condiciones de mercado.

### Objetivos  
Los objetivos espec√≠ficos de esta PEC son:  
- Familiarizarse con el funcionamiento de Vue.js.  
- Conocer conceptos b√°sicos de componentes en Vue.

### Recursos de lectura  
Tal y como hicimos en la PEC anterior, a continuaci√≥n os indicamos los recursos de lectura que consideramos importantes que revis√©is y estudi√©is para realizar esta PEC. Tambi√©n os indicamos las secciones (o cap√≠tulos concretos) que deber√≠ais leer con atenci√≥n para la correcta ejecuci√≥n de esta PEC. Para cada una de las partes recomendadas incluimos un comentario para motivar nuestra recomendaci√≥n. Por supuesto, si quer√©is profundizar, pod√©is revisar y leer las secciones no recomendadas en este listado de cada recurso.  
üëÅ El concepto de componente no se crea en el √°mbito Web, sino que ha existido en el √°rea de ingenier√≠a del software desde hace tiempo. En uno de los libros de referencia sobre desarrollo de software orientado a objetos, titulado ‚ÄúObject-oriented Software Construction‚Äù, escrito por Bertrand Meyer y publicado en 1988; ya se introduc√≠a este concepto. Si quieres revisar el concepto de componente desde el punto de vista de ingenier√≠a del software (y no de ingenier√≠a web), te recomendamos leer el cap√≠tulo 8 del libro Fundamentals of Software Architecture, escrito por Mark Richards y Neal Ford.  
üìï **Libro:** Azaustre Rodr√≠guez, C. Conceptos y t√©cnicas avanzadas de programaci√≥n web. FUOC, 2024  

**2. El concepto de componente**  
En este primer cap√≠tulo, exploraremos el proceso de registro de componentes y su ciclo de vida. Es importante comprender estos conceptos clave antes de pasar al cap√≠tulo 2.5, donde aprenderemos a crear componentes en los frameworks de JavaScript m√°s populares: Vue, React, Angular o Svelte.  
8.1.1. **Single-file components**  
En este breve subcap√≠tulo, veremos un ejemplo de c√≥mo crear un componente de archivo √∫nico en Vue.  
üí° Como habr√°s podido leer en los recursos, los componentes en Vue est√°n relacionados con Componentes Web, un concepto m√°s abstracto que pretende ofrecer un conjunto de funcionalidades para crear elementos reutilizables en la Web. Si quieres profundizar m√°s en el concepto de Componentes Web, te recomendamos leer el art√≠culo de Mozilla Developer Network.  

üíª **Vue docs**  
Essentials. https://vuejs.org/guide/essentials/application.html  
En esta serie de cap√≠tulos se hace un peque√±o repaso a las caracter√≠sticas b√°sicas de Vue, su estructura y los principios b√°sicos para usar este framework. Presta atenci√≥n especial a los cap√≠tulos Template Syntax, Reactivity Fundamentals y Component Basics, ya que es el lugar donde se desarrolla la mayor parte de los conceptos necesarios para realizar esta PEC.  
üí° Vue 3 cuenta con dos tipos de API: Options API y Composition API. El uso de cada API implica un estilo de programaci√≥n diferente y el uso de m√©todos diferentes. En este recurso puedes estudiar sus diferencias. En esta PEC haremos uso de la **Options API** y de su documentaci√≥n.

### Formato de env√≠o  
A trav√©s del aula, debes entregar un archivo zip con el contenido de la carpeta src del proyecto y un archivo PDF con las respuestas a las preguntas formuladas. El documento PDF debe tener al menos el nombre del estudiante en el encabezado.

### Puntuaci√≥n  
- La puntuaci√≥n de cada pregunta se detalla en su enunciado, con un total de 10 puntos.  
- Las preguntas otorgan un m√°ximo de 2 puntos. Destacar los puntos claves de cada respuesta es suficiente.  
- El desarrollo de los componentes otorga una puntuaci√≥n m√°xima de 8 puntos. La correcci√≥n tendr√° en cuenta:  
  - Creaci√≥n correcta de componentes y estructura de archivos correcta (20%)  
  - Creaci√≥n correcta de par√°metros/datos (20%)  
  - Creaci√≥n correcta de plantillas en base a la informaci√≥n proporcionada y los estilos CSS adjuntos (20%)  
  - Creaci√≥n de color personalizado para cada tarjeta vinculado a los datos (10%)  
  - Creaci√≥n de casos de ejemplo con datos de prueba (20%)  
  - Calidad general del c√≥digo (10%)

### Contacto  
En caso de que teng√°is que consultar algo mediante el foro o por correo electr√≥nico, copiad vuestro c√≥digo a una plataforma online y enviad el link para evitar problemas con el correo de la UOC (ya que elimina los ficheros .js y .vue para evitar inyectar c√≥digo malicioso as√≠ como la indentaci√≥n del c√≥digo). Os recomendamos utilizar cualquiera de estas dos opciones:  
- **Codepen** (para sencillos snippets de c√≥digo)  
- **CodeSandBox** (para ejercicios m√°s complejos)  
**Nota:** En caso de publicar alg√∫n c√≥digo en el foro, deber√°n ser consultas gen√©ricas y no directamente soluciones a los ejercicios. Hacer accesible soluciones de ejercicios a otros compa√±eros, aunque pueda no tener una intenci√≥n directa, se considerar√° copia y se penalizar√° acad√©micamente a nivel de asignatura.

### Propiedad intelectual y plagio  
La Normativa acad√©mica de la UOC dispone que el proceso de evaluaci√≥n se cimenta en el trabajo personal del estudiante y presupone la autenticidad de la autor√≠a y la originalidad de los ejercicios realizados.  
En esta PEC no est√° permitido el uso de herramientas de Inteligencia Artificial. En el plan de estudios y en la web sobre integridad acad√©mica y plagio de la UOC encontrar√°s m√°s informaci√≥n sobre las faltas y las consecuencias del plagio. Recuerda que si utilizas material externo siempre tienes que hacer referencia a las fuentes, tambi√©n puedes leer [C√≥mo citar](https://biblioteca.uoc.edu/es/pagina/Como-citar/)  
El estudiante ser√° calificado con un suspenso (D/0) si se detecta falta de originalidad en la autor√≠a de alguna prueba de evaluaci√≥n continua (PEC) o final (PEF), sea porque haya utilizado material o dispositivos no autorizados, sea porque ha copiado textualmente de internet, o ha copiado apuntes, de PEC, de materiales, manuales o art√≠culos (sin la cita correspondiente) o de otro estudiante, o por cualquier otra conducta irregular.

### Preguntas  
Responde las siguientes preguntas. No es necesario desarrollarlos en un proyecto real:

**Ejercicio 1. (0,5 puntos)**  
Crea un nuevo componente llamado ProductCard con las siguientes propiedades y datos:  
**Props requeridos:**  
- title: String  
- price: Number  
- inStock: Boolean  
**Data:**  
- quantity: number. Valor inicial: 0  
- shipping: array. Valores:  
  - {id: 1, cost: 3.95, days: 3, country: Germany, freeShippingItems: 10}  
  - {id: 2, cost: 0.50, days: 15, country: China, freeShippingItems: 5}  
- selectedShipping: Object. Valor inicial: objeto vac√≠o.  
**Template:**  
```html
<h2>{{ title }}</h2>  
<p>Price: ${{ price }}</p>
```

**Ejercicio 2. (0,25 puntos)**  
A√±ade un m√©todo llamado increaseQuantity en el componente creado anteriormente, que incremente en 1 el valor de ‚Äúquantity‚Äù siempre que el array de shipping tenga alg√∫n valor. Crea un bot√≥n con el texto "Add to cart‚Äù que llame a esta funci√≥n.

**Ejercicio 3. (0,25 puntos)**  
Modifica la plantilla del componente para que muestre un nuevo texto en caso de que el producto no est√© en stock:  
```html
<small>Out of stock</small>
```

**Ejercicio 4. (0,5 puntos)**  
Modifica el bot√≥n de ‚ÄúAdd to cart‚Äù para que incluya la propiedad ‚Äúdisabled‚Äù tanto si no hay valores en el array Shipping como si no hay stock del producto.

**Ejercicio 5. (0,5 puntos)**  
Muestra un mensaje bajo el bot√≥n de ‚ÄúAdd to cart‚Äù tras hacerle click si faltan items para que el env√≠o sea gratuito. Por ejemplo, si se ha seleccionado la opci√≥n del pa√≠s ‚ÄúGermany‚Äù, su ‚ÄúfreeShippingItems‚Äù es 10 y tenemos 3 productos en el carrito, debe salir el siguiente mensaje:  
```html
<p>Buy 7 more items to have free shipping!</p>
```

### Presentaci√≥n del caso de estudio  
Durante esta PEC y las siguientes, vamos a crear una aplicaci√≥n web en Vue.js para gestionar nuestro visionado de series de televisi√≥n, donde podremos a√±adir nuevas series, borrarlas, poner nuestra valoraci√≥n, comentarios, etc. Para facilitar el desarrollo, esta PEC y las siguientes abordar√°n cada uno de los diferentes aspectos de Vue.js que trabajaremos durante el curso.

### Estilos  
Antes de empezar, aunque pod√©is utilizar estilos propios, en los materiales encontrar√©is los estilos globales y para cada componente para que sea m√°s f√°cil montar la aplicaci√≥n. El resultado final debe quedar como en la captura de pantalla en formato escritorio (no hace falta que sea responsivo). Tambi√©n dispon√©is, en la carpeta ‚Äúassets‚Äù, los iconos e im√°genes de la aplicaci√≥n.

### Componentes  
En esta PEC, abordaremos la estructura y desarrollo b√°sico de los componentes que componen la aplicaci√≥n, sin tener en cuenta el origen de los datos, ni la comunicaci√≥n entre ellos.  
**Nota:** Para esta entrega, s√≥lo ser√° necesario probar el comportamiento del tablero con datos de prueba. Los m√©todos, watchers o cualquier tipo de l√≥gica de negocio no ser√°n evaluados en esta PEC y se realizar√°n en futuras PEC.

**ShowCard.vue**  
En primer lugar, tenemos nuestro componente **ShowCard**: Este componente es la unidad m√≠nima de informaci√≥n que contendr√° los datos de una serie, en forma de tarjeta.  
Este componente recibir√° un objeto con los siguientes par√°metros:  
- id: ID (en formato int)  
- title: Nombre  
- description: Descripci√≥n  
- image: URL de la imagen  
- rating: N√∫mero float entre 0 y 5  
- tags: Array de strings  
- notes: Un string  
- color: Un string en formato de color hexadecimal. Por ejemplo, ‚Äú#2e6136‚Äù  
- releaseDate: Un string con la fecha de estreno  

**Nota:** Estos par√°metros deber√°n pasarse al componente como parte del objeto ‚ÄúShow‚Äù, no como par√°metros por separado.

Con esta informaci√≥n, deber√≠ais poder montar un componente con su template, script y style utilizando un c√≥digo HTML sem√°ntico.

A tener en cuenta:  
- El color del borde de la tarjeta es din√°mico est√° relacionado con el par√°metro ‚Äúcolor‚Äù del objeto.  
- Las estrellas se pintan utilizando el emoji ‚òÖ. Siempre aparecer√°n 5 estrellas y se pintar√°n de color amarillo aquellas que, redondeando al n√∫mero ‚Äúint‚Äù m√°s bajo, correspondan a la valoraci√≥n actual. Por ejemplo, un 4.5 de rating pintar√° 4 estrellas de color amarillo y una estrella de color gris.

**CardBoard.vue**  
Este componente se encargar√° de cargar la lista de tarjetas de series, por lo que se deber√° iterar a trav√©s de una serie de componentes de tipo ShowCard.vue. Este componente recibir√° los siguientes par√°metros:  
- showList: Array de items.

**FilterBar.vue**  
Este componente se encargar√° en el futuro de realizar b√∫squedas y filtrar los resultados. Tambi√©n contiene un bot√≥n que permitir√° mostrar el formulario para crear series. Cuenta con los siguientes inputs:  
- Barra de b√∫squeda.  
- Selector de etiquetas. Pod√©is incluir de manera aleatoria 4 o 5 etiquetas para identificar una serie (Comedia, drama, etc.).  
- Rating: Un rango que mostrar√° los √≠tems que tengan, como m√≠nimo, lo que se ha seleccionado. Va de 0 a 5.  
- Sort by: Se encargar√° de ordenar los elementos dependiendo de tres caracter√≠sticas: Nombre, fecha de estreno y valoraci√≥n.  
- Order: Vinculado a lo anterior, ordenar√° los elementos de manera ascendente o descendente.  
El bot√≥n ‚ÄúAdd new show‚Äù se podr√° ocultar en el futuro.

**CardForm.vue**  
Este componente, situado a la derecha de la aplicaci√≥n, ser√° el encargado de gestionar la creaci√≥n de nuevos elementos en una futura PEC. B√°sicamente es un formulario que, en el futuro, emitir√° nuevos elementos para agregar a la lista de items. Contiene un bot√≥n arriba a la derecha que en el futuro permitir√° ocultarse a s√≠ mismo, al igual que el bot√≥n de ‚ÄúAdd new show‚Äù. De momento, pod√©is incluir un condicional que permita ocultarse o mostrarse con una variable.

**App.vue**  
Este componente se encargar√° de la gesti√≥n global de la aplicaci√≥n y a su vez compondr√° la estructura general.  
Para esta PEC, se deben generar 5 series pasando valores de prueba como par√°metros, para simular la apariencia de la imagen de presentaci√≥n del caso de estudio.  
Este componente debe contener las siguientes caracter√≠sticas:  
- Cuenta con una cabecera que contendr√° el logo y el t√≠tulo ‚ÄúTV Show Manager‚Äù seguido de tu nombre y apellido.  
- Importa los componentes FilterBar, CardBoard y CardForm, colocados como en la captura de pantalla.  
- Pasa el listado de datos de prueba a CardBoard.  
- Los datos de prueba deben ser coherentes para darle sentido a nuestra aplicaci√≥n.

---

¬°Espero que la transcripci√≥n te sea √∫til! ¬øNecesitas algo m√°s sobre este documento?